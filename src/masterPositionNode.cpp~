#include <ros/ros.h>
#include <no_look_pass_robot/depth.h>
#include <no_look_pass_robot/bounding.h>
#include <no_look_pass_robot/master.h>
#include <sstream>

#include <message_filters/subscriber.h>
#include <message_filters/synchronizer.h>
#include <message_filters/sync_policies/exact_time.h>

no_look_pass_robot::master master_msg;
using namespace message_filters;

typedef sync_policies::ExactTime<no_look_pass_robot::depth, no_look_pass_robot::bounding> MySyncPolicy;


class positionCalculation
{
private:


public:
	positionCalculation()
	{
		
	}
	
	~positionCalculation()
	{
		
	}
	void calculationfunc(no_look_pass_robot::depth::ConstPtr depth_data, no_look_pass_robot::bounding::ConstPtr bound_data);
};

void positionCalculation::calculationfunc(no_look_pass_robot::depth::ConstPtr depth_data, no_look_pass_robot::bounding::ConstPtr bound_data)
{
	int x = bound_data->x;
	int y = bound_data->y;
	int w = bound_data->w;
	int h = bound_data->h;

	int height = depth_data->height;
	int width = depth_data->width;
	vector<vector<float>> depth(depth_data);
	
	double angle = atan2((2*x + w)/2 - width/2 , y + h + height);
	
	double master_x = cos(angle) * l;
	double master_y = sin(angle) * l;

	master_msg.x = master_x;
	master_msg.y = master_y;
}



class masterPositionSubscriber
{
private:
	ros::NodeHandle _nh;
	message_filters::Subscriber<no_look_pass_robot::depth> *sub_depth;
	message_filters::Subscriber<no_look_pass_robot::bounding> *sub_bounding;
	Synchronizer<MySyncPolicy> *sync;
	positionCalculation* calculation;

public:
	masterPositionSubscriber()
	{		
		sub_depth = new message_filters::Subscriber<no_look_pass_robot::depth>(_nh, "/depth", 10);
		sub_bounding = new message_filters::Subscriber<no_look_pass_robot::bounding>(_nh, "/bounding", 10);

		sync = new Synchronizer<MySyncPolicy> (MySyncPolicy(10), *sub_depth, *sub_bounding);
  		sync->registerCallback(boost::bind(&masterPositionSubscriber::masterPosition, this, _1, _2));
		
		calculation = new positionCalculation();
	}

	void masterPosition(const no_look_pass_robot::depth::ConstPtr& depthData, const no_look_pass_robot::bounding::ConstPtr& boundingData);
};


void masterPositionSubscriber::masterPosition(const no_look_pass_robot::depth::ConstPtr& depthData, const no_look_pass_robot::bounding::ConstPtr& boundingData)
{
	calculation->calculationfunc(depthData, boundingData);	
}

class masterPositionPublisher
{
private:
	ros::NodeHandle _nh;
	ros::Publisher _pub;

public:
	masterPositionPublisher()
	{
		_pub = _nh.advertise<no_look_pass_robot::master>("/master", 100, this);
	}

	void publish();
};

void masterPositionPublisher::publish()
{
	ros::Rate rate(10);

	while(ros::ok())
	{
		ros::spinOnce();
		_pub.publish(master_msg);
		rate.sleep();
	}
}



int main(int argc, char **argv)
{
	ros::init(argc, argv, "masterPosition_node");

	masterPositionSubscriber* subscriber = new masterPositionSubscriber();
	masterPositionPublisher* publisher = new masterPositionPublisher();

	publisher->publish();

	return 0;
}
